<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>RaspberryPi on Greg. I/O</title>
    <link>https://gautric.github.io/tags/raspberrypi/</link>
    <description>Recent content in RaspberryPi on Greg. I/O</description>
    <generator>Hugo -- 0.147.6</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 15 Jan 2024 09:00:00 +0000</lastBuildDate>
    <atom:link href="https://gautric.github.io/tags/raspberrypi/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS SSM, Ansible et Raspberry Pi via SSH</title>
      <link>https://gautric.github.io/blog/2024/01/15/aws-ssm-ansible-et-raspberry-pi-via-ssh/</link>
      <pubDate>Mon, 15 Jan 2024 09:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2024/01/15/aws-ssm-ansible-et-raspberry-pi-via-ssh/</guid>
      <description>&lt;p&gt;Dans ce nouveau et premier post de 2024, d√©couvrez comment AWS Systems Manager (SSM) s&amp;rsquo;int√®gre de mani√®re utile avec le Raspberry Pi (test√© avec 3, zero et 5). Explorez les possibilit√©s de cette combinaison, id√©ale pour les projets d&amp;rsquo;informatique personnelle d√©centralis√©e. Que vous soyez un passionn√© du Cloud, un amateur d&amp;rsquo;IoT ou simplement curieux, cet article vous r√©serve des surprises !
Ce post sera particuli√®rement utile pour ceux qui cherchent √† acc√©der facilement √† leur Raspberry Pi sans avoir √† configurer le port forwarding sur leur box Internet, et ce, pour un co√ªt minime [^pricing]. On utilisera la fonctionnalit√© Session Manager d&amp;rsquo;AWS SSM. üçá&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Hotspot Wifi with Ansible into a RaspberryPi 3</title>
      <link>https://gautric.github.io/blog/2016/09/27/setup-a-hotspot-wifi-with-ansible-into-a-raspberrypi-3/</link>
      <pubDate>Tue, 27 Sep 2016 15:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/09/27/setup-a-hotspot-wifi-with-ansible-into-a-raspberrypi-3/</guid>
      <description>&lt;p&gt;This September, RaspberryPi foundation has sold &lt;a href=&#34;https://www.raspberrypi.org/blog/ten-millionth-raspberry-pi-new-kit/&#34;&gt;ten (10) Millions of unit&lt;/a&gt;. This small computer is amazing, you can setup very quickly several cool IoT projects. Since 2012, I bought all versions &lt;a href=&#34;https://en.wikipedia.org/wiki/Raspberry_Pi#Specifications&#34;&gt;(B 256Mo, B 512Mo, B+, 2B, 3B)&lt;/a&gt; of RaspberryPi. I am a big fan of this product and you can find into &lt;a href=&#34;https://gautric.github.io/blog/&#34;&gt;this blog&lt;/a&gt; some projects I&amp;rsquo;ve made on top of this little computer.&lt;/p&gt;
&lt;p&gt;RaspberryPi version 3 comes with a wifi builtin interface, and this wifi interface can be configured as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hotspot_(Wi-Fi)&#34;&gt;Wifi Hotspot&lt;/a&gt;. I use it every day at home or at office. Today, I will show you how to configure a Wifi Hotspot with &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;, which is a powerful automation tool that simplifies configuration management.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Device IO and i2cdetect implementation</title>
      <link>https://gautric.github.io/blog/2016/03/09/device-io-and-i2cdetect-implementation/</link>
      <pubDate>Wed, 09 Mar 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/03/09/device-io-and-i2cdetect-implementation/</guid>
      <description>&lt;p&gt;Today, we&amp;rsquo;re going to implement a quick tool available on the RaspberryPi using Java &lt;a href=&#34;https://wiki.openjdk.java.net/display/dio/Main&#34;&gt;Device IO API&lt;/a&gt;. The &lt;code&gt;i2cdetect&lt;/code&gt; utility is a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I¬≤C&lt;/a&gt; device scanner for your RaspberryPi that browses all I¬≤C addresses to find which I¬≤C devices are connected to your board. This tutorial demonstrates how to recompile the Device IO API and implement the &lt;code&gt;i2cdetect&lt;/code&gt; functionality in Java, providing a platform-independent way to interact with I¬≤C devices.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i2cdetect with the Java Device I/O API implementation - a powerful tool for hardware detection and diagnostics on embedded systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot Kura Device IO GPIO and I2C</title>
      <link>https://gautric.github.io/blog/2016/02/29/rhiot-kura-device-io-gpio-and-i2c/</link>
      <pubDate>Mon, 29 Feb 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/02/29/rhiot-kura-device-io-gpio-and-i2c/</guid>
      <description>&lt;p&gt;Recently, a colleague of mine asked me to implement a small demonstration project. I decided to develop a new component for the Rhiot project. This component is the &lt;a href=&#34;http://openjdk.java.net/projects/dio/&#34;&gt;DeviceIO&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I2C&lt;/a&gt; &lt;a href=&#34;http://camel.apache.org&#34;&gt;Camel&lt;/a&gt; component, which builds upon my previous work on Camel-pi4j that I had already developed for the Rhiot project. In this article, we&amp;rsquo;ll explore how to use this component within the Kura Platform via the Camel Framework. For this demonstration, we&amp;rsquo;ll need some hardware devices, specifically a &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;RaspberryPi&lt;/a&gt; and an &lt;a href=&#34;http://activemq.apache.org/&#34;&gt;ActiveMQ&lt;/a&gt; broker.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot over Kura over Docker over RaspberryPi ;-)</title>
      <link>https://gautric.github.io/blog/2015/12/28/rhiot-over-kura-over-docker-over-raspberrypi-/</link>
      <pubDate>Mon, 28 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/28/rhiot-over-kura-over-docker-over-raspberrypi-/</guid>
      <description>&lt;p&gt;During this cool Christmas day, Santa Claus brings us lot of presents (I hope for you too), I received 2 &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;RaspberryPi Zero&lt;/a&gt;, Thx you brother ;-). I will show you a cool stuff after this special day. We gonna test how to use &lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; into &lt;a href=&#34;https://eclipse.org/kura/&#34;&gt;Kura Eclipse Platform&lt;/a&gt; running inside &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; container deployed into a real &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;RaspberryPi Zero&lt;/a&gt; device (in this order). If you don&amp;rsquo;t have yet a RaspberryPi (B+, 2 or zero) device you can use &lt;a href=&#34;https://gautric.github.io/blog/2015/12/23/kura-OSGi-docker-debian.html&#34;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot Kura Gateway Sample (Emulator &amp; RaspberryPi) </title>
      <link>https://gautric.github.io/blog/2015/12/03/rhiot-kura-gateway-sample-emulator-raspberrypi/</link>
      <pubDate>Thu, 03 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/03/rhiot-kura-gateway-sample-emulator-raspberrypi/</guid>
      <description>&lt;p&gt;For a while, I have been developing during my free time for the &lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; with my Red Hat colleague &lt;a href=&#34;http://henryk-konsek.blogspot.fr/&#34;&gt;Henryk&lt;/a&gt;. We started by developing several &lt;a href=&#34;http://camel.apache.org/components.html#Components-ExternalComponents&#34;&gt;Camel components&lt;/a&gt; such as kura, pi4j, and bluetooth with other volunteers. Now we are focusing on developing and integrating these components for the &lt;a href=&#34;http://www.eclipse.org/kura/&#34;&gt;Kura Platform&lt;/a&gt;. Kura is an &lt;a href=&#34;http://www.osgi.org&#34;&gt;OSGi Platform&lt;/a&gt; designed specifically for IoT, capable of running on RaspberryPi, BeagleBone, or Intel Edison devices.&lt;/p&gt;
&lt;p&gt;The Kura Platform comes with many embedded services tailored for IoT contexts, including GPIO, USB, I2C, Cloud Service, and more. In this post, we will explore:&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT RaspberryPi Sense-Hat display</title>
      <link>https://gautric.github.io/blog/2015/11/24/rhiot-raspberrypi-sense-hat-display/</link>
      <pubDate>Tue, 24 Nov 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/11/24/rhiot-raspberrypi-sense-hat-display/</guid>
      <description>&lt;p&gt;Recently, I bought the new official &lt;a href=&#34;https://www.raspberrypi.org/products/sense-hat/&#34;&gt;Sense-HAT&lt;/a&gt; from &lt;a href=&#34;https://www.raspberrypi.org&#34;&gt;RaspberryPi foundation&lt;/a&gt;. This &lt;a href=&#34;https://www.raspberrypi.org/blog/introducing-raspberry-pi-hats/&#34;&gt;HAT&lt;/a&gt; (Hardware Attached on Top) add-on for the RaspberryPi device includes lots of cool features and sensors. The Sense-HAT comes with an 8x8 RGB565 pixel display, a Joystick, a Gyroscope, Accelerometer, Magnetometer, Temperature, Barometric pressure and Humidity sensors.&lt;/p&gt;
&lt;p&gt;All sensors are i2c compliant, making them easily accessible with the &lt;a href=&#34;https://github.com/rhiot/rhiot/tree/master/docs#i2c-driver&#34;&gt;rhiot camel-pi4j&lt;/a&gt; component. This makes it very straightforward to retrieve data from all sensors and transmit them to external systems. The Rhiot team has also developed the first implementation of the &lt;a href=&#34;https://github.com/rhiot/rhiot/tree/master/components/camel-framebuffer&#34;&gt;rhiot camel-framebuffer component&lt;/a&gt;, which now enables pushing images directly to the 8x8 pixel screen. Note that the matrix consists of 8x8 RGB565 LEDs (2 bytes per pixel), providing a colorful display despite its small size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Les premiers jours du projet Camel IoT Labs</title>
      <link>https://gautric.github.io/blog/2015/04/25/les-premiers-jours-du-projet-camel-iot-labs/</link>
      <pubDate>Sat, 25 Apr 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/04/25/les-premiers-jours-du-projet-camel-iot-labs/</guid>
      <description>&lt;p&gt;Aujourd&amp;rsquo;hui, l&amp;rsquo;Internet des Objets (IoT) prend une place de plus en plus importante dans l&amp;rsquo;industrie informatique et au-del√†. Des montres connect√©es &lt;a href=&#34;http://www.withings.com/fr/withings-activite.html&#34;&gt;Withings&lt;/a&gt;, aux &lt;a href=&#34;http://raspberrypi.org&#34;&gt;Raspberry Pi&lt;/a&gt; vendus √† plus de 5 millions d&amp;rsquo;unit√©s, en passant par les cartes &lt;a href=&#34;http://www.arduino.cc/&#34;&gt;Arduino&lt;/a&gt; √† bas co√ªt et autres modules &lt;a href=&#34;https://tessel.io/&#34;&gt;Tessel&lt;/a&gt;, la baisse du co√ªt de production des objets √©lectroniques a permis une large diffusion de ces nouvelles technologies.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://gautric.github.io/img/camel-labs.png&#34; style=&#34;max-width:120%;&#34; align=&#34;left&#34; height=&#34;110&#34; hspace=&#34;30&#34;/&gt; En 2012, les premiers Raspberry Pi sont lanc√©s sur le march√©, et j&amp;rsquo;en ai imm√©diatement acquis un. Depuis, j&amp;rsquo;ai collectionn√© presque tous les mod√®les : B rev1, B rev2, B+ et B2 ;-). J&amp;rsquo;ai √©galement repris mon fer √† souder, comme √† l&amp;rsquo;√©poque du lyc√©e. Mais contrairement √† cette √©poque o√π l&amp;rsquo;on disposait de peu de ressources internet, peu de standards et peu de mat√©riel, aujourd&amp;rsquo;hui nous avons presque tout √† notre disposition. Il ne reste plus qu&amp;rsquo;√† assembler des briques physiques avec des briques logicielles plus ou moins √©volu√©es.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
