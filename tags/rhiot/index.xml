<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rhiot on Greg. I/O</title>
    <link>https://gautric.github.io/tags/rhiot/</link>
    <description>Recent content in rhiot on Greg. I/O</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 29 Feb 2016 14:00:00 +0000</lastBuildDate>
    <atom:link href="https://gautric.github.io/tags/rhiot/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rhiot Kura Device IO GPIO and I2C</title>
      <link>https://gautric.github.io/blog/2016/02/29/rhiot-kura-OSGi-Device-IO-API.html</link>
      <pubDate>Mon, 29 Feb 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/02/29/rhiot-kura-OSGi-Device-IO-API.html</guid>
      <description>Recently, a colleague of mine calls me to implements a small demo. I decide to develop a new component for Rhiot project. This component is the DeviceIO I2C Camel, I reuse a previous work from Camel-pi4j I&amp;rsquo;ve already develop for Rhiot project too. We gonna see how to use this component into Kura Platform via Camel Framework. For this demo we need some hardware devices, a RaspberryPi and a ActiveMQ broker too.</description>
    </item>
    <item>
      <title>Rhiot over Kura over Docker over RaspberryPi ;-)</title>
      <link>https://gautric.github.io/blog/2015/12/28/rhiot-kura-docker-raspberrypi.html</link>
      <pubDate>Mon, 28 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/28/rhiot-kura-docker-raspberrypi.html</guid>
      <description>During this cool Christmas day, Santa Claus brings us lot of presents (I hope for you), I received 2 RaspberryPi Zero, Thx you brother ;-). I will show you a cool stuff after this special day. We gonna test how to use Rhiot project into Kura Eclipse Platform running inside Docker container deployed into a real RaspberryPi Zero device (in this order). If you don&amp;rsquo;t have yet a RaspberryPi (B+, 2 or zero) device you can use my previous post.</description>
    </item>
    <item>
      <title>Rhiot Kura Gateway Sample (Emulator &amp; RaspberryPi) </title>
      <link>https://gautric.github.io/blog/2015/12/03/rhiot-kura-OSGi-full-sample.html</link>
      <pubDate>Thu, 03 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/03/rhiot-kura-OSGi-full-sample.html</guid>
      <description>For a while, I develop during my free time for Rhiot project with my Red Hat colleague Henryk. We started to develop several Camel components like (kura, pi4j, bluetooth) with others volunteers. Now we focus to develop and integrate those components for Kura Platform. Kura is an OSGi Platform designed for IoT, it can run on RaspberryPi, BeagleBone or Intel Edison device. Kura Platform has got lot of embedded services for IoT context (GPIO, USB, I2C, Cloud Service, etc&amp;hellip;) In this post we will see :</description>
    </item>
    <item>
      <title>RHIoT RaspberryPi Sense-Hat display</title>
      <link>https://gautric.github.io/blog/2015/11/24/rhiot-framebuffer-raspberrypi-sense-hat.html</link>
      <pubDate>Tue, 24 Nov 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/11/24/rhiot-framebuffer-raspberrypi-sense-hat.html</guid>
      <description>Recently, I bought the new an official Sense-HAT from RaspberryPi foundation. This HAT add-on for the RaspberryPi device includes lots of cool thing. Sense-HAT comes with an 8x8 RGB565 pixel display, a Joystick, a Gyroscope, Accelerometer, Magnetometer, Temperature, Barometric pressure and Humidity sensors. All sensors are i2c compliant, with the rhiot camel-pi4j component it is very easy to retrieve all data from sensors and push them outside. Rhiot team had also developed the first implementation of rhiot camel-framebuffer component, now it is possible to push image directly to 8x8 pixel screen : NB the matrix is 8x8 RGB565 LED (2 bytes per pixels).</description>
    </item>
    <item>
      <title>RHIoT Webcam and websocket components on MacbookPro in Groovy</title>
      <link>https://gautric.github.io/blog/2015/10/23/rhiot-camel-webcam-websocket-macbookpro.html</link>
      <pubDate>Fri, 23 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/23/rhiot-camel-webcam-websocket-macbookpro.html</guid>
      <description>Yesterday, we&amp;rsquo;ve played with our MacBook Pro&amp;rsquo;s webcam. Today, we gonna see how to send images through a websocket directly in this page !!! or via a JavaFx program. We gonna re-use the previous post and integrate camel Websocket component. Let&amp;rsquo;s play with Groovy language &amp;hellip;
Webcam image to Websocket w/ Rhiot &amp;amp; Camel projects on MacbookPro
Let&amp;rsquo;s start to broadcast yourself.
Requisites Have a mac tested MacBook Pro Retina, 13-inch, Mid 2014 Groovy Mac port installed Groovy Version: 2.</description>
    </item>
    <item>
      <title>RHIoT 0.1.2 Webcam component on MacOS X in Groovy</title>
      <link>https://gautric.github.io/blog/2015/10/22/rhiot-0.1.2-camel-webcam-macos-x.html</link>
      <pubDate>Thu, 22 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/22/rhiot-0.1.2-camel-webcam-macos-x.html</guid>
      <description>My tech leader on RHIoT project (ex-camellabs) Henryk had just release the last version of RHIoT project : 0.1.2. Lot of new stuffs are included in this new release, more details available here. I found in list a cool stuff to test. We gonna check if our new commiter @levackt from ZA worked well ;-)
Webcam camel component on Mac OSX with Groovy language
Let&amp;rsquo;s start to broadcast yourself.
Requisites Have a mac tested MacBook Pro Retina, 13-inch, Mid 2014 Groovy Mac port installed Groovy Version: 2.</description>
    </item>
  </channel>
</rss>
