<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>En on Greg. I/O</title>
    <link>https://gautric.github.io/tags/en/</link>
    <description>Recent content in En on Greg. I/O</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Apr 2025 09:00:00 +0000</lastBuildDate>
    <atom:link href="https://gautric.github.io/tags/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Activate &amp; Deactivate PoE Camera via Cisco Router</title>
      <link>https://gautric.github.io/blog/2025/04/06/activate-deactivate-poe-camera-via-cisco-router/</link>
      <pubDate>Sun, 06 Apr 2025 09:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2025/04/06/activate-deactivate-poe-camera-via-cisco-router/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll quickly explore how to activate or deactivate a camera via a Cisco router. In my setup, I&amp;rsquo;ve implemented a DIY surveillance installation. I&amp;rsquo;m using a PoE camera with a Cisco Small Business router. Specifically, this is the &lt;a href=&#34;https://www.amazon.fr/Cisco-SG250-10P-10-Ports-Gigabit-Switch/dp/B01GZ1VXYO&#34;&gt;Cisco Smart Switch SG250-10P&lt;/a&gt;, which offers PoE functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activate/Deactivate PoE Camera from Cisco Router&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Before starting, you need to be able to &lt;a href=&#34;https://www.cisco.com/c/en/us/td/docs/switches/lan/csbms/250_/2_5_7/Admin_guide/tesla-250-ag/cb_250_chapter_15.html#ID-00006535&#34;&gt;connect via SSH to the router&lt;/a&gt;.
It&amp;rsquo;s possible to create a service account with an SSH key for remote connection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Camel XML XPath XSLT Aggregator</title>
      <link>https://gautric.github.io/blog/2016/12/03/camel-xml-xpath-xslt-aggregator/</link>
      <pubDate>Sat, 03 Dec 2016 15:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/12/03/camel-xml-xpath-xslt-aggregator/</guid>
      <description>&lt;p&gt;This month I went to &lt;a href=&#34;https://en.wikipedia.org/wiki/Greece&#34;&gt;Greece&lt;/a&gt; for a customer of mine. I worked at Athens on &lt;a href=&#34;http://camel.apache.org/&#34;&gt;Camel&lt;/a&gt; integration with Mainframe legacy stuff.
Customer would like to use XML message format during the full Camel route process. His wish was to reuse some Camel routes as new service components.
Fortunately, Camel framework meets all of this requirements out of the box. We will this in this simple sample how to do it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a Camel sample with XML messages and XSL transformation&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Hotspot Wifi with Ansible into a RaspberryPi 3</title>
      <link>https://gautric.github.io/blog/2016/09/27/setup-a-hotspot-wifi-with-ansible-into-a-raspberrypi-3/</link>
      <pubDate>Tue, 27 Sep 2016 15:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/09/27/setup-a-hotspot-wifi-with-ansible-into-a-raspberrypi-3/</guid>
      <description>&lt;p&gt;This September, RaspberryPi foundation has sold &lt;a href=&#34;https://www.raspberrypi.org/blog/ten-millionth-raspberry-pi-new-kit/&#34;&gt;ten (10) Millions of unit&lt;/a&gt;. This small computer is amazing, you can setup very quickly several cool IoT projects. Since 2012, I bought all versions &lt;a href=&#34;https://en.wikipedia.org/wiki/Raspberry_Pi#Specifications&#34;&gt;(B 256Mo, B 512Mo, B+, 2B, 3B)&lt;/a&gt; of RaspberryPi. I am a big fan of this product and you can find into &lt;a href=&#34;https://gautric.github.io/blog/&#34;&gt;this blog&lt;/a&gt; some projects I&amp;rsquo;ve made on top of this little computer.
RaspberryPi version 3 comes with a wifi builtin interface, and this wifi interface can be configured as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hotspot_(Wi-Fi)&#34;&gt;Wifi Hotspot&lt;/a&gt;. I use it every day at home or at office. Today, I will show you how to configure a Wifi Hotspot with &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JBoss EAP 7 connected to WebsphereMQ running on Docker</title>
      <link>https://gautric.github.io/blog/2016/08/03/jboss-eap-7-connected-to-webspheremq-running-on-docker/</link>
      <pubDate>Wed, 03 Aug 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/08/03/jboss-eap-7-connected-to-webspheremq-running-on-docker/</guid>
      <description>&lt;p&gt;Last year for a previous customer I wrote an article/post about &lt;a href=&#34;https://gautric.github.io/blog/2015/03/26/websphere-mq-jboss-eap-integration-english-version.html&#34;&gt;WebsphereMQ Best Practice with JBoss EAP 6&lt;/a&gt;. Today we will make almost the same stuff but with JBoss EAP 7, WebsphereMQ Sample IVT application and running on Docker. I assume you know basic command about Docker.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Howto run JBoss EAP 7 connected to WebsphereMQ both running on Docker&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;For this lab, you need the following software :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package of JBoss EAP 7 &lt;a href=&#34;http://www.jboss.org/products/eap/download/&#34;&gt;http://www.jboss.org/products/eap/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;installed Docker for Linux, for Mac or Window &lt;em&gt;&amp;gt;= 1.12&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div&gt;&lt;svg width=&#34;0&#34; height=&#34;0&#34; display=&#34;none&#34; xmlns=&#34;http://www.w3.org/2000/svg&#34;&gt;&lt;symbol id=&#34;tip-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.967-111.033 248-248 248S8 392.967 8 256 119.033 8 256 8s248 111.033 248 248zM227.314 387.314l184-184c6.248-6.248 6.248-16.379 0-22.627l-22.627-22.627c-6.248-6.249-16.379-6.249-22.628 0L216 308.118l-70.059-70.059c-6.248-6.248-16.379-6.248-22.628 0l-22.627 22.627c-6.248 6.248-6.248 16.379 0 22.627l104 104c6.249 6.249 16.379 6.249 22.628.001z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;note-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M504 256c0 136.997-111.043 248-248 248S8 392.997 8 256C8 119.083 119.043 8 256 8s248 111.083 248 248zm-248 50c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;warning-notice&#34; viewBox=&#34;0 0 576 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M569.517 440.013C587.975 472.007 564.806 512 527.94 512H48.054c-36.937 0-59.999-40.055-41.577-71.987L246.423 23.985c18.467-32.009 64.72-31.951 83.154 0l239.94 416.028zM288 354c-25.405 0-46 20.595-46 46s20.595 46 46 46 46-20.595 46-46-20.595-46-46-46zm-43.673-165.346l7.418 136c.347 6.364 5.609 11.346 11.982 11.346h48.546c6.373 0 11.635-4.982 11.982-11.346l7.418-136c.375-6.874-5.098-12.654-11.982-12.654h-63.383c-6.884 0-12.356 5.78-11.981 12.654z&#34;/&gt;&lt;/symbol&gt;&lt;symbol id=&#34;info-notice&#34; viewBox=&#34;0 0 512 512&#34; preserveAspectRatio=&#34;xMidYMid meet&#34;&gt;&lt;path d=&#34;M256 8C119.043 8 8 119.083 8 256c0 136.997 111.043 248 248 248s248-111.003 248-248C504 119.083 392.957 8 256 8zm0 110c23.196 0 42 18.804 42 42s-18.804 42-42 42-42-18.804-42-42 18.804-42 42-42zm56 254c0 6.627-5.373 12-12 12h-88c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h12v-64h-12c-6.627 0-12-5.373-12-12v-24c0-6.627 5.373-12 12-12h64c6.627 0 12 5.373 12 12v100h12c6.627 0 12 5.373 12 12v24z&#34;/&gt;&lt;/symbol&gt;&lt;/svg&gt;&lt;/div&gt;&lt;div class=&#34;notice warning&#34; &gt;
&lt;p class=&#34;first notice-title&#34;&gt;&lt;span class=&#34;icon-notice baseline&#34;&gt;&lt;svg&gt;&lt;use href=&#34;#warning-notice&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;Warning&lt;/p&gt;</description>
    </item>
    <item>
      <title>JConsole &amp; Java Mission Control with JBoss EAP 7</title>
      <link>https://gautric.github.io/blog/2016/07/19/jconsole-java-mission-control-with-jboss-eap-7/</link>
      <pubDate>Tue, 19 Jul 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/07/19/jconsole-java-mission-control-with-jboss-eap-7/</guid>
      <description>&lt;p&gt;During Red Hat summit, &lt;a href=&#34;http://middlewareblog.redhat.com/2016/06/27/announcing-jboss-eap-7/#more-432&#34;&gt;Red Hat releases the new version of its JBoss Application Server&lt;/a&gt;. JBoss App Server provides a new JMX Remote Management protocol to connect with. A common JMX tool is &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html&#34;&gt;JConsole&lt;/a&gt; and we will see how to use it with remote mode. We also configure an other tool called &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html&#34;&gt;Java Mission Control&lt;/a&gt; for a cooler JMX monitoring stuff.
Sorry my platform is a MacOS X, but I am sure your skill is enough to adapt into your environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lancement de JBoss EAP 7</title>
      <link>https://gautric.github.io/blog/2016/06/27/lancement-de-jboss-eap-7/</link>
      <pubDate>Mon, 27 Jun 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/06/27/lancement-de-jboss-eap-7/</guid>
      <description>&lt;p&gt;Cela fait exactement 5 ans que je travaille pour &lt;a href=&#34;www.redhat.com&#34;&gt;Red Hat&lt;/a&gt; et pour mon cadeau d&amp;rsquo;anniversaire &lt;a href=&#34;www.redhat.com&#34;&gt;Red Hat&lt;/a&gt; vient de sortir sa nouvelle version de son serveur d&amp;rsquo;application phare à savoir &lt;a href=&#34;https://en.wikipedia.org/wiki/JBoss_Enterprise_Application_Platform&#34;&gt;JBoss EAP 7&lt;/a&gt;.
Cette nouvelle version de JBoss EAP 7 presente certaine evolutions interessantes par rapport à la version 6, tout en gradant la philosophie et l&amp;rsquo;architecture générale du serveur d&amp;rsquo;application.
Nous allons voir dans ce post les principaux elements qui me semblent le plus interessant à retenir de cette nouvelle version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Camel is going into Eclipse Kura</title>
      <link>https://gautric.github.io/blog/2016/03/18/camel-is-going-into-eclipse-kura/</link>
      <pubDate>Fri, 18 Mar 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/03/18/camel-is-going-into-eclipse-kura/</guid>
      <description>&lt;p&gt;Today, I am going to talk about a good news, it is a technical post but without any code/material or stuff like that (thx God). The &lt;a href=&#34;http://www.eclipse.org/kura/&#34;&gt;Eclipse Kura Project&lt;/a&gt; has accepted &lt;a href=&#34;https://github.com/eclipse/kura/pull/72&#34;&gt;GitHub Pull Request&lt;/a&gt; and now includes a new cool component to &lt;code&gt;develop&lt;/code&gt; branch. This new component is &lt;a href=&#34;http://camel.apache.org&#34;&gt;Camel Framework&lt;/a&gt; from &lt;a href=&#34;http://apache.org/&#34;&gt;Apache Foundation&lt;/a&gt;.
&lt;a href=&#34;https://about.me/hekonsek&#34;&gt;Henryk Konsek&lt;/a&gt; a colleague of mine is the principal guy behind this new. The Camel and Kura integration starts from the first &lt;a href=&#34;http://camel.apache.org/kura.html&#34;&gt;Camel Kura component&lt;/a&gt; available since Camel version 2.15 still from Henryk.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Device IO and i2cdetect implementation</title>
      <link>https://gautric.github.io/blog/2016/03/09/device-io-and-i2cdetect-implementation/</link>
      <pubDate>Wed, 09 Mar 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/03/09/device-io-and-i2cdetect-implementation/</guid>
      <description>&lt;p&gt;Today, we gonna implement a quick tool available into RaspberryPi with Java &lt;a href=&#34;https://wiki.openjdk.java.net/display/dio/Main&#34;&gt;Device IO API&lt;/a&gt;. &lt;code&gt;i2cdetect&lt;/code&gt; is a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;i2c&lt;/a&gt; device scanner for your RaspberryPi, it browse all i2c address to find which i2c device is connected. This tutorial show how to recompile DeviceIO API and program too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i2cdetect with the Java Device I/O API implementation .&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;requisites&#34;&gt;Requisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One &lt;a href=&#34;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&#34;&gt;RaspberryPi&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;tested w/ RPi B+&lt;/li&gt;
&lt;li&gt;should works with all version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;an I2C Device&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/products/sense-hat/&#34;&gt;Sense Hat&lt;/a&gt; for example&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compile-device-io&#34;&gt;Compile Device IO&lt;/h3&gt;
&lt;p&gt;Download  Device IO API and compile it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot Kura Device IO GPIO and I2C</title>
      <link>https://gautric.github.io/blog/2016/02/29/rhiot-kura-device-io-gpio-and-i2c/</link>
      <pubDate>Mon, 29 Feb 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/02/29/rhiot-kura-device-io-gpio-and-i2c/</guid>
      <description>&lt;p&gt;Recently, a colleague of mine calls me to implements a small demo. I decide to develop a new component for Rhiot project. This component is the &lt;a href=&#34;http://openjdk.java.net/projects/dio/&#34;&gt;DeviceIO&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I2C&lt;/a&gt; &lt;a href=&#34;http://camel.apache.org&#34;&gt;Camel&lt;/a&gt;, I reuse a previous work from Camel-pi4j I&amp;rsquo;ve already develop for Rhiot project too. We gonna see how to use this component into Kura Platform via Camel Framework. For this demo we need some hardware devices, a &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;RaspberryPi&lt;/a&gt; and a &lt;a href=&#34;http://activemq.apache.org/&#34;&gt;ActiveMQ&lt;/a&gt; broker too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to use Kura Camel DIO from Rhiot Quickstart into RaspberryPi.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot over Kura over Docker over RaspberryPi ;-)</title>
      <link>https://gautric.github.io/blog/2015/12/28/rhiot-over-kura-over-docker-over-raspberrypi-/</link>
      <pubDate>Mon, 28 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/28/rhiot-over-kura-over-docker-over-raspberrypi-/</guid>
      <description>&lt;p&gt;During this cool Christmas day, Santa Claus brings us lot of presents (I hope for you), I received 2 &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;RaspberryPi Zero&lt;/a&gt;, Thx you brother ;-). I will show you a cool stuff after this special day. We gonna test how to use &lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; into &lt;a href=&#34;https://eclipse.org/kura/&#34;&gt;Kura Eclipse Platform&lt;/a&gt; running inside &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; container deployed into a real &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;RaspberryPi Zero&lt;/a&gt; device (in this order). If you don&amp;rsquo;t have yet a RaspberryPi (B+, 2 or zero) device you can use &lt;a href=&#34;https://gautric.github.io/blog/2015/12/23/kura-OSGi-docker-debian.html&#34;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kura over Docker</title>
      <link>https://gautric.github.io/blog/2015/12/23/kura-over-docker/</link>
      <pubDate>Wed, 23 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/23/kura-over-docker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; decides recently to support mainly &lt;a href=&#34;https://eclipse.org/kura/&#34;&gt;Kura Eclipse Platform&lt;/a&gt;. Our project will provides some code and extension for Kura like Camel integration and lots of other stuff. We have some new Camel component dedicated for Kura Platform (gpio, cloud, wifi). We want use this platform because it is OSGi compliant sotfware, focused to IoT universe, supported by &lt;a href=&#34;http://eclipse.org&#34;&gt;Eclipse Foundation&lt;/a&gt; and &lt;a href=&#34;https://www.eurotech.com&#34;&gt;Eurotech&lt;/a&gt;.
Kura runs on RaspberryPi, but if you don&amp;rsquo;t have yet a RaspberryPi device  we will show how to run Kura into &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot Kura Gateway Sample (Emulator &amp; RaspberryPi) </title>
      <link>https://gautric.github.io/blog/2015/12/03/rhiot-kura-gateway-sample-emulator-raspberrypi/</link>
      <pubDate>Thu, 03 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/03/rhiot-kura-gateway-sample-emulator-raspberrypi/</guid>
      <description>&lt;p&gt;For a while, I develop during my free time for &lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; with my Red Hat colleague &lt;a href=&#34;http://henryk-konsek.blogspot.fr/&#34;&gt;Henryk&lt;/a&gt;. We started to develop several &lt;a href=&#34;http://camel.apache.org/components.html#Components-ExternalComponents&#34;&gt;Camel components&lt;/a&gt; like (kura, pi4j, bluetooth) with others volunteers.
Now we focus to develop and integrate those components for &lt;a href=&#34;http://www.eclipse.org/kura/&#34;&gt;Kura Platform&lt;/a&gt;. Kura is an &lt;a href=&#34;http://www.osgi.org&#34;&gt;OSGi Platform&lt;/a&gt; designed for IoT, it can run on RaspberryPi, BeagleBone or Intel Edison device.
Kura Platform has got lot of embedded services for IoT context (GPIO, USB, I2C, Cloud Service, etc&amp;hellip;)
In this post we will see :&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT RaspberryPi Sense-Hat display</title>
      <link>https://gautric.github.io/blog/2015/11/24/rhiot-raspberrypi-sense-hat-display/</link>
      <pubDate>Tue, 24 Nov 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/11/24/rhiot-raspberrypi-sense-hat-display/</guid>
      <description>&lt;p&gt;Recently, I bought the new an official &lt;a href=&#34;https://www.raspberrypi.org/products/sense-hat/&#34;&gt;Sense-HAT&lt;/a&gt; from &lt;a href=&#34;ttps://www.raspberrypi.org&#34;&gt;RaspberryPi foundation&lt;/a&gt;. This &lt;a href=&#34;https://www.raspberrypi.org/blog/introducing-raspberry-pi-hats/&#34;&gt;HAT&lt;/a&gt; add-on for the RaspberryPi device includes lots of cool thing.  Sense-HAT comes with an 8x8 RGB565 pixel display, a Joystick, a Gyroscope, Accelerometer, Magnetometer, Temperature, Barometric pressure and Humidity sensors. All sensors are i2c compliant, with the &lt;a href=&#34;https://github.com/rhiot/rhiot/tree/master/docs#i2c-driver&#34;&gt;rhiot camel-pi4j&lt;/a&gt; component it is very easy to retrieve all data from sensors and push them outside. Rhiot team had also developed the first implementation of &lt;a href=&#34;https://github.com/rhiot/rhiot/tree/master/components/camel-framebuffer&#34;&gt;rhiot camel-framebuffer component&lt;/a&gt;, now it is possible to push image directly to 8x8 pixel screen : NB the matrix is 8x8 RGB565 LED (2 bytes per pixels).&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT Webcam and websocket components on MacbookPro in Groovy</title>
      <link>https://gautric.github.io/blog/2015/10/23/rhiot-webcam-and-websocket-components-on-macbookpro-in-groovy/</link>
      <pubDate>Fri, 23 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/23/rhiot-webcam-and-websocket-components-on-macbookpro-in-groovy/</guid>
      <description>&lt;p&gt;Yesterday, we&amp;rsquo;ve played with our MacBook Pro&amp;rsquo;s webcam. Today, we gonna see how to send images through a websocket
directly in this page !!! or via a JavaFx program. We gonna re-use the previous post and integrate camel Websocket component. Let&amp;rsquo;s play with Groovy language &amp;hellip;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Webcam image to Websocket w/ Rhiot &amp;amp; Camel projects on MacbookPro&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s start to broadcast yourself.&lt;/p&gt;
&lt;h2 id=&#34;requisites&#34;&gt;Requisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Have a mac&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;tested MacBook Pro Retina, 13-inch, Mid 2014&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Groovy Mac port installed&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Groovy Version: 2.4.4 JVM: 1.8.0_45 Vendor: Oracle Corporation OS: Mac OS X&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;program&#34;&gt;Program&lt;/h2&gt;
&lt;p&gt;We gonna re-use our previous Groovy language program an we will change some stuff&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT 0.1.2 Webcam component on MacOS X in Groovy</title>
      <link>https://gautric.github.io/blog/2015/10/22/rhiot-0.1.2-webcam-component-on-macos-x-in-groovy/</link>
      <pubDate>Thu, 22 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/22/rhiot-0.1.2-webcam-component-on-macos-x-in-groovy/</guid>
      <description>&lt;p&gt;My tech leader on &lt;a href=&#34;http://rhiot.io&#34;&gt;RHIoT project&lt;/a&gt; (ex-camellabs) &lt;a href=&#34;http://henryk-konsek.blogspot.fr/2015/10/rhiot-012-is-out.html&#34;&gt;Henryk&lt;/a&gt; had just release the last version of RHIoT project : 0.1.2.
Lot of new stuffs are included in this new release, more details available &lt;a href=&#34;https://github.com/rhiot/rhiot/blob/master/docs/release-notes.md#012--2015-10-22&#34;&gt;here&lt;/a&gt;.
I found in list a cool stuff to test. We gonna check if our new commiter &lt;a href=&#34;https://github.com/levackt&#34;&gt;@levackt&lt;/a&gt; from ZA worked well ;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Webcam camel component on Mac OSX with Groovy language&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s start to broadcast yourself.&lt;/p&gt;
&lt;h2 id=&#34;requisites&#34;&gt;Requisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Have a mac&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;tested MacBook Pro Retina, 13-inch, Mid 2014&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Groovy Mac port installed&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Groovy Version: 2.4.4 JVM: 1.8.0_45 Vendor: Oracle Corporation OS: Mac OS X&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;program&#34;&gt;Program&lt;/h2&gt;
&lt;p&gt;We gonna use Groovy language for this simple example&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSH to MacOS X (El Capitan) through iCloud tunnel</title>
      <link>https://gautric.github.io/blog/2015/10/03/ssh-to-macos-x-el-capitan-through-icloud-tunnel/</link>
      <pubDate>Sat, 03 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/03/ssh-to-macos-x-el-capitan-through-icloud-tunnel/</guid>
      <description>&lt;p&gt;After my wedding and a honey moon in Sicilia, I am back home to blog about some cool tech stuff.
Yesterday, I update my favorite laptop it&amp;rsquo;s a MacbookPro [ja keyboard] (Retina, 13-inch, Mid 2014) with the new MacOS X 10.11 El Capitan version. I also like MacOS software because it includes bash, ssh and lot of cool Linux/Unix commands. I have got also an MacMini at home behind my Internet box. For some time, I was looking for some out of the box stuff to connect to my MacMini with SSH via iCloud stack.
Finally, I google it and I found some good infos/news about this issue.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UNESCO Challenge, point UNESCO, Le Havre</title>
      <link>https://gautric.github.io/blog/2015/08/04/unesco-challenge-point-unesco-le-havre/</link>
      <pubDate>Tue, 04 Aug 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/08/04/unesco-challenge-point-unesco-le-havre/</guid>
      <description>&lt;p&gt;Few years ago, my friends and I started a game we called the UNESCO challenge/Point UNESCO (fr). The goal of this game is very simple, we try to visit every World Heritage Site (WHS), one visit == one UNESCO point. Sites could be a building, a city, a complex, a land, a monument, a mountain, etc.. and they are selected by UNESCO as being of special cultural or physical significance. We have to take the picture of signboard by UNESCO as a proof of our visit. We have got one more rule : Every place or site you have already visited which become a WHS, you also earn  a point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wildfly 9.0 w/ Docker, Offline CLI and HTTP/2</title>
      <link>https://gautric.github.io/blog/2015/07/09/wildfly-9.0-w/-docker-offline-cli-and-http/2/</link>
      <pubDate>Thu, 09 Jul 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/07/09/wildfly-9.0-w/-docker-offline-cli-and-http/2/</guid>
      <description>&lt;p&gt;Last week, Wildfly community has just released &lt;a href=&#34;http://wildfly.org/news/2015/07/02/WildFly9-Final-Released/&#34;&gt;&lt;em&gt;&lt;strong&gt;Wildfly 9.0.0.Final&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; and I wrote a post about enabling HTTP2 into Wildlfy via the offline command line. Today, we will see how to do it with a Docker container. Docker container simplifies lot of thing when we need to deploy middleware infrastructure. I love this technology, because it is an Open Source project, it provides lot of command line stuff, the build process is awesome and run process is very easy ;-).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wildfly 9.0 Offline CLI and HTTP/2</title>
      <link>https://gautric.github.io/blog/2015/07/03/wildfly-9.0-offline-cli-and-http/2/</link>
      <pubDate>Fri, 03 Jul 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/07/03/wildfly-9.0-offline-cli-and-http/2/</guid>
      <description>&lt;p&gt;Yesterday, Wildfly community has just released &lt;a href=&#34;http://wildfly.org/news/2015/07/02/WildFly9-Final-Released/&#34;&gt;&lt;em&gt;&lt;strong&gt;Wildfly 9.0.0.Final&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;, the last Application Server version. As I talked on my previous &lt;a href=&#34;https://gautric.github.io/blog/2015/05/04/wildfly-9-CR01-released-sortie.html&#34;&gt;French post about Wildfly&lt;/a&gt; they are a lot of new cool stuffs. I noticed two of them we could use both together quickly. Into a datacenter, we want setup the first configuration without startup full process and open unnecessary port. I propose in this post to setup &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;&lt;em&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; with offline mode, it is quite useful because we could want to start a JBoss instance directly with HTTP/2 protocol enabled.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Camel IoT Labs i2c gpio mqtt lcd</title>
      <link>https://gautric.github.io/blog/2015/05/20/camel-iot-labs-i2c-gpio-mqtt-lcd/</link>
      <pubDate>Wed, 20 May 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/05/20/camel-iot-labs-i2c-gpio-mqtt-lcd/</guid>
      <description>&lt;p&gt;One month ago, Henryk, Claus and I&amp;rsquo;ve started Camel Labs project. This project provides some cool new stuff for IoT community based on Camel technology/project. The stuff are new IoT components to connect electronics devices (i2c,SPI,gpio, tinkerforge) and cloud (pubnub, cloudlet, mqtt) together. In this lab, we will show how to build an end to end IoT integration with i2c device, mqtt broker and i2c lcd with few line of code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Camel RaspberryPi PoC</title>
      <link>https://gautric.github.io/blog/2015/04/03/apache-camel-raspberrypi-poc/</link>
      <pubDate>Fri, 03 Apr 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/04/03/apache-camel-raspberrypi-poc/</guid>
      <description>&lt;p&gt;Raspberry Pi is a small computer. It costs just 35$. Five million have been already sold worldwide. The first goal of this project was to provide a low-cost computer for electronic and computer science education. But lots of e-hobbists like me use it for personal use (domotic for example). Camel is an Enterprise Integration Patterns (a.k.a EIP) framework to connect, process and dispatch messages from and to severals technologies.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Apache Camel and Raspberry Pi integration (proof of concept)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Best Practices Websphere MQ/JBoss EAP 6 English Version</title>
      <link>https://gautric.github.io/blog/2015/03/26/best-practices-websphere-mq/jboss-eap-6-english-version/</link>
      <pubDate>Thu, 26 Mar 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/03/26/best-practices-websphere-mq/jboss-eap-6-english-version/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.jboss.org/products/eap/overview/&#34;&gt;JBoss EAP&lt;/a&gt; application server is &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/compatibility-jsp-136984.html&#34;&gt;Java EE 6 certified&lt;/a&gt;, it implements via &lt;a href=&#34;http://www.ironjacamar.org/&#34;&gt;IronJacamar&lt;/a&gt; framework, the Java EE Connector Architecture (JCA) standard. This standard provides connection ability for Java EE applications to interact with external data system like JMS broker, file system or mainframe. The JCA standard is similar to the JDBC standard. The latter interacts only with relational databases but JCA can interact with more data system providers and it can integrate different kinds of Enterprise Information System (EIS).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Premier post</title>
      <link>https://gautric.github.io/blog/2015/03/10/premier-post/</link>
      <pubDate>Tue, 10 Mar 2015 18:02:10 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/03/10/premier-post/</guid>
      <description>&lt;p&gt;Je posterai ici mes articles. En esperant vous y retrouver. Bonne lecture.&lt;/p&gt;
&lt;p&gt;I will post here my articles. I look forward to seeing you.&lt;/p&gt;
&lt;p&gt;私は　ここに　私のブログを　書きます。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
