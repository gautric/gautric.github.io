<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>En on Greg. I/O</title>
    <link>https://gautric.github.io/tags/en/</link>
    <description>Recent content in En on Greg. I/O</description>
    <generator>Hugo -- 0.147.6</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 06 Apr 2025 09:00:00 +0000</lastBuildDate>
    <atom:link href="https://gautric.github.io/tags/en/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Activate &amp; Deactivate PoE Camera via Cisco Router</title>
      <link>https://gautric.github.io/blog/2025/04/06/activate-deactivate-poe-camera-via-cisco-router/</link>
      <pubDate>Sun, 06 Apr 2025 09:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2025/04/06/activate-deactivate-poe-camera-via-cisco-router/</guid>
      <description>&lt;p&gt;In this post, we&amp;rsquo;ll quickly explore how to activate or deactivate a camera via a Cisco router. In my setup, I&amp;rsquo;ve implemented a DIY surveillance installation. I&amp;rsquo;m using a PoE camera with a Cisco Small Business router. Specifically, this is the &lt;a href=&#34;https://www.amazon.fr/Cisco-SG250-10P-10-Ports-Gigabit-Switch/dp/B01GZ1VXYO&#34;&gt;Cisco Smart Switch SG250-10P&lt;/a&gt;, which offers PoE functionality.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Activate/Deactivate PoE Camera from Cisco Router&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;Before starting, you need to be able to &lt;a href=&#34;https://www.cisco.com/c/en/us/td/docs/switches/lan/csbms/250_/2_5_7/Admin_guide/tesla-250-ag/cb_250_chapter_15.html#ID-00006535&#34;&gt;connect via SSH to the router&lt;/a&gt;.
It&amp;rsquo;s possible to create a service account with an SSH key for remote connection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Camel XML XPath XSLT Aggregator</title>
      <link>https://gautric.github.io/blog/2016/12/03/camel-xml-xpath-xslt-aggregator/</link>
      <pubDate>Sat, 03 Dec 2016 15:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/12/03/camel-xml-xpath-xslt-aggregator/</guid>
      <description>&lt;p&gt;This month I went to &lt;a href=&#34;https://en.wikipedia.org/wiki/Greece&#34;&gt;Greece&lt;/a&gt; for a customer of mine. I worked at Athens on &lt;a href=&#34;http://camel.apache.org/&#34;&gt;Camel&lt;/a&gt; integration with Mainframe legacy stuff.
Customer would like to use XML message format during the full Camel route process. His wish was to reuse some Camel routes as new service components.
Fortunately, Camel framework meets all of this requirements out of the box. We will this in this simple sample how to do it.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a Camel sample with XML messages and XSL transformation&lt;/p&gt;</description>
    </item>
    <item>
      <title>Setup a Hotspot Wifi with Ansible into a RaspberryPi 3</title>
      <link>https://gautric.github.io/blog/2016/09/27/setup-a-hotspot-wifi-with-ansible-into-a-raspberrypi-3/</link>
      <pubDate>Tue, 27 Sep 2016 15:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/09/27/setup-a-hotspot-wifi-with-ansible-into-a-raspberrypi-3/</guid>
      <description>&lt;p&gt;This September, RaspberryPi foundation has sold &lt;a href=&#34;https://www.raspberrypi.org/blog/ten-millionth-raspberry-pi-new-kit/&#34;&gt;ten (10) Millions of unit&lt;/a&gt;. This small computer is amazing, you can setup very quickly several cool IoT projects. Since 2012, I bought all versions &lt;a href=&#34;https://en.wikipedia.org/wiki/Raspberry_Pi#Specifications&#34;&gt;(B 256Mo, B 512Mo, B+, 2B, 3B)&lt;/a&gt; of RaspberryPi. I am a big fan of this product and you can find into &lt;a href=&#34;https://gautric.github.io/blog/&#34;&gt;this blog&lt;/a&gt; some projects I&amp;rsquo;ve made on top of this little computer.
RaspberryPi version 3 comes with a wifi builtin interface, and this wifi interface can be configured as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Hotspot_(Wi-Fi)&#34;&gt;Wifi Hotspot&lt;/a&gt;. I use it every day at home or at office. Today, I will show you how to configure a Wifi Hotspot with &lt;a href=&#34;https://www.ansible.com/&#34;&gt;Ansible&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>JBoss EAP 7 connected to WebsphereMQ running on Docker</title>
      <link>https://gautric.github.io/blog/2016/08/03/jboss-eap-7-connected-to-webspheremq-running-on-docker/</link>
      <pubDate>Wed, 03 Aug 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/08/03/jboss-eap-7-connected-to-webspheremq-running-on-docker/</guid>
      <description>&lt;p&gt;Last year for a previous customer I wrote an article/post about &lt;a href=&#34;https://gautric.github.io/blog/2015/03/26/websphere-mq-jboss-eap-integration-english-version.html&#34;&gt;WebsphereMQ Best Practice with JBoss EAP 6&lt;/a&gt;. Today we will make almost the same stuff but with JBoss EAP 7, WebsphereMQ Sample IVT application and running on Docker. I assume you know basic command about Docker.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Howto run JBoss EAP 7 connected to WebsphereMQ both running on Docker&lt;/p&gt;&lt;/blockquote&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;For this lab, you need the following software :&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;package of JBoss EAP 7 &lt;a href=&#34;http://www.jboss.org/products/eap/download/&#34;&gt;http://www.jboss.org/products/eap/download/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;installed Docker for Linux, for Mac or Window &lt;em&gt;&amp;gt;= 1.12&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;notice warning&#34; &gt;
&lt;p class=&#34;first notice-title&#34;&gt;&lt;span class=&#34;icon-notice baseline&#34;&gt;&lt;svg&gt;&lt;use href=&#34;#warning-notice&#34;&gt;&lt;/use&gt;&lt;/svg&gt;&lt;/span&gt;Warning&lt;/p&gt;</description>
    </item>
    <item>
      <title>JConsole &amp; Java Mission Control with JBoss EAP 7</title>
      <link>https://gautric.github.io/blog/2016/07/19/jconsole-java-mission-control-with-jboss-eap-7/</link>
      <pubDate>Tue, 19 Jul 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/07/19/jconsole-java-mission-control-with-jboss-eap-7/</guid>
      <description>&lt;p&gt;During Red Hat summit, &lt;a href=&#34;http://middlewareblog.redhat.com/2016/06/27/announcing-jboss-eap-7/#more-432&#34;&gt;Red Hat releases the new version of its JBoss Application Server&lt;/a&gt;. JBoss App Server provides a new JMX Remote Management protocol to connect with. A common JMX tool is &lt;a href=&#34;http://docs.oracle.com/javase/7/docs/technotes/guides/management/jconsole.html&#34;&gt;JConsole&lt;/a&gt; and we will see how to use it with remote mode. We also configure an other tool called &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaseproducts/mission-control/java-mission-control-1998576.html&#34;&gt;Java Mission Control&lt;/a&gt; for a cooler JMX monitoring stuff.
Sorry my platform is a MacOS X, but I am sure your skill is enough to adapt into your environment.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lancement de JBoss EAP 7</title>
      <link>https://gautric.github.io/blog/2016/06/27/lancement-de-jboss-eap-7/</link>
      <pubDate>Mon, 27 Jun 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/06/27/lancement-de-jboss-eap-7/</guid>
      <description>&lt;p&gt;Cela fait exactement 5 ans que je travaille pour &lt;a href=&#34;www.redhat.com&#34;&gt;Red Hat&lt;/a&gt; et pour mon cadeau d&amp;rsquo;anniversaire &lt;a href=&#34;www.redhat.com&#34;&gt;Red Hat&lt;/a&gt; vient de sortir sa nouvelle version de son serveur d&amp;rsquo;application phare à savoir &lt;a href=&#34;https://en.wikipedia.org/wiki/JBoss_Enterprise_Application_Platform&#34;&gt;JBoss EAP 7&lt;/a&gt;.
Cette nouvelle version de JBoss EAP 7 presente certaine evolutions interessantes par rapport à la version 6, tout en gradant la philosophie et l&amp;rsquo;architecture générale du serveur d&amp;rsquo;application.
Nous allons voir dans ce post les principaux elements qui me semblent le plus interessant à retenir de cette nouvelle version.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Camel is going into Eclipse Kura</title>
      <link>https://gautric.github.io/blog/2016/03/18/camel-is-going-into-eclipse-kura/</link>
      <pubDate>Fri, 18 Mar 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/03/18/camel-is-going-into-eclipse-kura/</guid>
      <description>&lt;p&gt;Today, I am going to talk about a good news, it is a technical post but without any code/material or stuff like that (thx God). The &lt;a href=&#34;http://www.eclipse.org/kura/&#34;&gt;Eclipse Kura Project&lt;/a&gt; has accepted &lt;a href=&#34;https://github.com/eclipse/kura/pull/72&#34;&gt;GitHub Pull Request&lt;/a&gt; and now includes a new cool component to &lt;code&gt;develop&lt;/code&gt; branch. This new component is &lt;a href=&#34;http://camel.apache.org&#34;&gt;Camel Framework&lt;/a&gt; from &lt;a href=&#34;http://apache.org/&#34;&gt;Apache Foundation&lt;/a&gt;.
&lt;a href=&#34;https://about.me/hekonsek&#34;&gt;Henryk Konsek&lt;/a&gt; a colleague of mine is the principal guy behind this new. The Camel and Kura integration starts from the first &lt;a href=&#34;http://camel.apache.org/kura.html&#34;&gt;Camel Kura component&lt;/a&gt; available since Camel version 2.15 still from Henryk.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Device IO and i2cdetect implementation</title>
      <link>https://gautric.github.io/blog/2016/03/09/device-io-and-i2cdetect-implementation/</link>
      <pubDate>Wed, 09 Mar 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/03/09/device-io-and-i2cdetect-implementation/</guid>
      <description>&lt;p&gt;Today, we gonna implement a quick tool available into RaspberryPi with Java &lt;a href=&#34;https://wiki.openjdk.java.net/display/dio/Main&#34;&gt;Device IO API&lt;/a&gt;. &lt;code&gt;i2cdetect&lt;/code&gt; is a simple &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;i2c&lt;/a&gt; device scanner for your RaspberryPi, it browse all i2c address to find which i2c device is connected. This tutorial show how to recompile DeviceIO API and program too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;i2cdetect with the Java Device I/O API implementation .&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;requisites&#34;&gt;Requisites&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;One &lt;a href=&#34;https://www.raspberrypi.org/products/raspberry-pi-2-model-b/&#34;&gt;RaspberryPi&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;tested w/ RPi B+&lt;/li&gt;
&lt;li&gt;should works with all version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;an I2C Device&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.raspberrypi.org/products/sense-hat/&#34;&gt;Sense Hat&lt;/a&gt; for example&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;compile-device-io&#34;&gt;Compile Device IO&lt;/h3&gt;
&lt;p&gt;Download  Device IO API and compile it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot Kura Device IO GPIO and I2C</title>
      <link>https://gautric.github.io/blog/2016/02/29/rhiot-kura-device-io-gpio-and-i2c/</link>
      <pubDate>Mon, 29 Feb 2016 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2016/02/29/rhiot-kura-device-io-gpio-and-i2c/</guid>
      <description>&lt;p&gt;Recently, a colleague of mine calls me to implements a small demo. I decide to develop a new component for Rhiot project. This component is the &lt;a href=&#34;http://openjdk.java.net/projects/dio/&#34;&gt;DeviceIO&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/I%C2%B2C&#34;&gt;I2C&lt;/a&gt; &lt;a href=&#34;http://camel.apache.org&#34;&gt;Camel&lt;/a&gt;, I reuse a previous work from Camel-pi4j I&amp;rsquo;ve already develop for Rhiot project too. We gonna see how to use this component into Kura Platform via Camel Framework. For this demo we need some hardware devices, a &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;RaspberryPi&lt;/a&gt; and a &lt;a href=&#34;http://activemq.apache.org/&#34;&gt;ActiveMQ&lt;/a&gt; broker too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;How to use Kura Camel DIO from Rhiot Quickstart into RaspberryPi.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot over Kura over Docker over RaspberryPi ;-)</title>
      <link>https://gautric.github.io/blog/2015/12/28/rhiot-over-kura-over-docker-over-raspberrypi-/</link>
      <pubDate>Mon, 28 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/28/rhiot-over-kura-over-docker-over-raspberrypi-/</guid>
      <description>&lt;p&gt;During this cool Christmas day, Santa Claus brings us lot of presents (I hope for you too), I received 2 &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;RaspberryPi Zero&lt;/a&gt;, Thx you brother ;-). I will show you a cool stuff after this special day. We gonna test how to use &lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; into &lt;a href=&#34;https://eclipse.org/kura/&#34;&gt;Kura Eclipse Platform&lt;/a&gt; running inside &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; container deployed into a real &lt;a href=&#34;https://www.raspberrypi.org/blog/raspberry-pi-zero/&#34;&gt;RaspberryPi Zero&lt;/a&gt; device (in this order). If you don&amp;rsquo;t have yet a RaspberryPi (B+, 2 or zero) device you can use &lt;a href=&#34;https://gautric.github.io/blog/2015/12/23/kura-OSGi-docker-debian.html&#34;&gt;my previous post&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kura over Docker</title>
      <link>https://gautric.github.io/blog/2015/12/23/kura-over-docker/</link>
      <pubDate>Wed, 23 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/23/kura-over-docker/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; has recently decided to primarily support the &lt;a href=&#34;https://eclipse.org/kura/&#34;&gt;Kura Eclipse Platform&lt;/a&gt;. Our project provides code and extensions for Kura, such as Camel integration and many other features. We&amp;rsquo;ve developed new Camel components specifically dedicated to the Kura Platform (gpio, cloud, wifi). We chose this platform because it&amp;rsquo;s an OSGi compliant software focused on the IoT universe, supported by the &lt;a href=&#34;http://eclipse.org&#34;&gt;Eclipse Foundation&lt;/a&gt; and &lt;a href=&#34;https://www.eurotech.com&#34;&gt;Eurotech&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While Kura runs natively on RaspberryPi hardware, if you don&amp;rsquo;t have a RaspberryPi device yet, this tutorial will show you how to run Kura within a &lt;a href=&#34;https://docker.com&#34;&gt;Docker&lt;/a&gt; container.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rhiot Kura Gateway Sample (Emulator &amp; RaspberryPi) </title>
      <link>https://gautric.github.io/blog/2015/12/03/rhiot-kura-gateway-sample-emulator-raspberrypi/</link>
      <pubDate>Thu, 03 Dec 2015 14:00:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/12/03/rhiot-kura-gateway-sample-emulator-raspberrypi/</guid>
      <description>&lt;p&gt;For a while, I have been developing during my free time for the &lt;a href=&#34;http://rhiot.io&#34;&gt;Rhiot project&lt;/a&gt; with my Red Hat colleague &lt;a href=&#34;http://henryk-konsek.blogspot.fr/&#34;&gt;Henryk&lt;/a&gt;. We started by developing several &lt;a href=&#34;http://camel.apache.org/components.html#Components-ExternalComponents&#34;&gt;Camel components&lt;/a&gt; such as kura, pi4j, and bluetooth with other volunteers. Now we are focusing on developing and integrating these components for the &lt;a href=&#34;http://www.eclipse.org/kura/&#34;&gt;Kura Platform&lt;/a&gt;. Kura is an &lt;a href=&#34;http://www.osgi.org&#34;&gt;OSGi Platform&lt;/a&gt; designed specifically for IoT, capable of running on RaspberryPi, BeagleBone, or Intel Edison devices.&lt;/p&gt;
&lt;p&gt;The Kura Platform comes with many embedded services tailored for IoT contexts, including GPIO, USB, I2C, Cloud Service, and more. In this post, we will explore:&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT RaspberryPi Sense-Hat display</title>
      <link>https://gautric.github.io/blog/2015/11/24/rhiot-raspberrypi-sense-hat-display/</link>
      <pubDate>Tue, 24 Nov 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/11/24/rhiot-raspberrypi-sense-hat-display/</guid>
      <description>&lt;p&gt;Recently, I bought the new official &lt;a href=&#34;https://www.raspberrypi.org/products/sense-hat/&#34;&gt;Sense-HAT&lt;/a&gt; from &lt;a href=&#34;https://www.raspberrypi.org&#34;&gt;RaspberryPi foundation&lt;/a&gt;. This &lt;a href=&#34;https://www.raspberrypi.org/blog/introducing-raspberry-pi-hats/&#34;&gt;HAT&lt;/a&gt; (Hardware Attached on Top) add-on for the RaspberryPi device includes lots of cool features and sensors. The Sense-HAT comes with an 8x8 RGB565 pixel display, a Joystick, a Gyroscope, Accelerometer, Magnetometer, Temperature, Barometric pressure and Humidity sensors.&lt;/p&gt;
&lt;p&gt;All sensors are i2c compliant, making them easily accessible with the &lt;a href=&#34;https://github.com/rhiot/rhiot/tree/master/docs#i2c-driver&#34;&gt;rhiot camel-pi4j&lt;/a&gt; component. This makes it very straightforward to retrieve data from all sensors and transmit them to external systems. The Rhiot team has also developed the first implementation of the &lt;a href=&#34;https://github.com/rhiot/rhiot/tree/master/components/camel-framebuffer&#34;&gt;rhiot camel-framebuffer component&lt;/a&gt;, which now enables pushing images directly to the 8x8 pixel screen. Note that the matrix consists of 8x8 RGB565 LEDs (2 bytes per pixel), providing a colorful display despite its small size.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT Webcam and websocket components on MacbookPro in Groovy</title>
      <link>https://gautric.github.io/blog/2015/10/23/rhiot-webcam-and-websocket-components-on-macbookpro-in-groovy/</link>
      <pubDate>Fri, 23 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/23/rhiot-webcam-and-websocket-components-on-macbookpro-in-groovy/</guid>
      <description>&lt;p&gt;Yesterday, we&amp;rsquo;ve played with our MacBook Pro&amp;rsquo;s webcam. Today, we gonna see how to send images through a websocket
directly in this page !!! or via a JavaFx program. We gonna re-use the previous post and integrate camel Websocket component. Let&amp;rsquo;s play with Groovy language to create a real-time webcam streaming solution.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Webcam image to Websocket w/ Rhiot &amp;amp; Camel projects on MacbookPro&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s start to broadcast yourself. This tutorial will guide you through setting up a webcam stream that can be viewed through a web browser or a JavaFX application.&lt;/p&gt;</description>
    </item>
    <item>
      <title>RHIoT 0.1.2 Webcam component on MacOS X in Groovy</title>
      <link>https://gautric.github.io/blog/2015/10/22/rhiot-0.1.2-webcam-component-on-macos-x-in-groovy/</link>
      <pubDate>Thu, 22 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/22/rhiot-0.1.2-webcam-component-on-macos-x-in-groovy/</guid>
      <description>&lt;p&gt;My tech leader on &lt;a href=&#34;http://rhiot.io&#34;&gt;RHIoT project&lt;/a&gt; (ex-camellabs) &lt;a href=&#34;http://henryk-konsek.blogspot.fr/2015/10/rhiot-012-is-out.html&#34;&gt;Henryk&lt;/a&gt; had just release the last version of RHIoT project : 0.1.2.
Lot of new stuffs are included in this new release, more details available &lt;a href=&#34;https://github.com/rhiot/rhiot/blob/master/docs/release-notes.md#012--2015-10-22&#34;&gt;here&lt;/a&gt;.
I found in list a cool stuff to test. We gonna check if our new commiter &lt;a href=&#34;https://github.com/levackt&#34;&gt;@levackt&lt;/a&gt; from ZA worked well ;-)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Webcam camel component on Mac OSX with Groovy language&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Let&amp;rsquo;s start to broadcast yourself.&lt;/p&gt;
&lt;h2 id=&#34;requisites&#34;&gt;Requisites&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Have a mac&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;tested MacBook Pro Retina, 13-inch, Mid 2014&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Groovy Mac port installed&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Groovy Version: 2.4.4 JVM: 1.8.0_45 Vendor: Oracle Corporation OS: Mac OS X&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;program&#34;&gt;Program&lt;/h2&gt;
&lt;p&gt;We gonna use Groovy language for this simple example. Groovy provides a concise and expressive syntax that makes it perfect for quickly testing new components like this webcam integration.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SSH to MacOS X (El Capitan) through iCloud tunnel</title>
      <link>https://gautric.github.io/blog/2015/10/03/ssh-to-macos-x-el-capitan-through-icloud-tunnel/</link>
      <pubDate>Sat, 03 Oct 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/10/03/ssh-to-macos-x-el-capitan-through-icloud-tunnel/</guid>
      <description>&lt;p&gt;After my wedding and a honey moon in Sicilia, I am back home to blog about some cool tech stuff.&lt;/p&gt;
&lt;p&gt;Yesterday, I updated my favorite laptop - a MacbookPro with Japanese keyboard (Retina, 13-inch, Mid 2014) - with the new MacOS X 10.11 El Capitan version. One of the reasons I love MacOS is that it includes bash, ssh, and many other powerful Linux/Unix commands right out of the box.&lt;/p&gt;</description>
    </item>
    <item>
      <title>UNESCO Challenge, point UNESCO, Le Havre</title>
      <link>https://gautric.github.io/blog/2015/08/04/unesco-challenge-point-unesco-le-havre/</link>
      <pubDate>Tue, 04 Aug 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/08/04/unesco-challenge-point-unesco-le-havre/</guid>
      <description>&lt;p&gt;Few years ago, my friends and I started a game we called the UNESCO challenge/Point UNESCO (fr). The goal of this game is very simple, we try to visit every World Heritage Site (WHS), one visit == one UNESCO point. Sites could be a building, a city, a complex, a land, a monument, a mountain, etc., and they are selected by UNESCO as being of special cultural or physical significance. We have to take the picture of signboard by UNESCO as a proof of our visit. We have got one more rule: Every place or site you have already visited which become a WHS, you also earn a point.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wildfly 9.0 w/ Docker, Offline CLI and HTTP/2</title>
      <link>https://gautric.github.io/blog/2015/07/09/wildfly-9.0-w/-docker-offline-cli-and-http/2/</link>
      <pubDate>Thu, 09 Jul 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/07/09/wildfly-9.0-w/-docker-offline-cli-and-http/2/</guid>
      <description>&lt;p&gt;Last week, Wildfly community has just released &lt;a href=&#34;http://wildfly.org/news/2015/07/02/WildFly9-Final-Released/&#34;&gt;&lt;em&gt;&lt;strong&gt;Wildfly 9.0.0.Final&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; and I wrote a post about enabling HTTP2 into Wildlfy via the offline command line. Today, we will see how to do it with a Docker container. Docker container simplifies lot of thing when we need to deploy middleware infrastructure. I love this technology, because it is an Open Source project, it provides lot of command line tools, the build process is automated and streamlined, and the run process is very easy to manage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Wildfly 9.0 Offline CLI and HTTP/2</title>
      <link>https://gautric.github.io/blog/2015/07/03/wildfly-9.0-offline-cli-and-http/2/</link>
      <pubDate>Fri, 03 Jul 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/07/03/wildfly-9.0-offline-cli-and-http/2/</guid>
      <description>&lt;p&gt;Yesterday, Wildfly community has just released &lt;a href=&#34;http://wildfly.org/news/2015/07/02/WildFly9-Final-Released/&#34;&gt;&lt;em&gt;&lt;strong&gt;Wildfly 9.0.0.Final&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt;, the last Application Server version. As I talked on my previous &lt;a href=&#34;https://gautric.github.io/blog/2015/05/04/wildfly-9-CR01-released-sortie.html&#34;&gt;French post about Wildfly&lt;/a&gt; they are a lot of new cool stuffs. I noticed two of them we could use both together quickly. Into a datacenter, we want setup the first configuration without startup full process and open unnecessary port. I propose in this post to setup &lt;a href=&#34;https://en.wikipedia.org/wiki/HTTP/2&#34;&gt;&lt;em&gt;&lt;strong&gt;HTTP/2&lt;/strong&gt;&lt;/em&gt;&lt;/a&gt; with offline mode, it is quite useful because we could want to start a JBoss instance directly with HTTP/2 protocol enabled.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Camel IoT Labs i2c gpio mqtt lcd</title>
      <link>https://gautric.github.io/blog/2015/05/20/camel-iot-labs-i2c-gpio-mqtt-lcd/</link>
      <pubDate>Wed, 20 May 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/05/20/camel-iot-labs-i2c-gpio-mqtt-lcd/</guid>
      <description>&lt;p&gt;One month ago, Henryk, Claus and I started the Camel Labs project. This project provides exciting new components for the IoT community based on Apache Camel technology. These components connect electronic devices (I2C, SPI, GPIO, Tinkerforge) and cloud services (PubNub, Cloudlet, MQTT) together. In this lab, we will demonstrate how to build an end-to-end IoT integration with I2C devices, an MQTT broker, and an I2C LCD display using just a few lines of code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Camel RaspberryPi PoC</title>
      <link>https://gautric.github.io/blog/2015/04/03/apache-camel-raspberrypi-poc/</link>
      <pubDate>Fri, 03 Apr 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/04/03/apache-camel-raspberrypi-poc/</guid>
      <description>&lt;h1 id=&#34;integrating-apache-camel-with-raspberry-pi-for-iot-applications&#34;&gt;Integrating Apache Camel with Raspberry Pi for IoT Applications&lt;/h1&gt;
&lt;p&gt;The Internet of Things (IoT) revolution is transforming how we interact with the physical world through technology. At the heart of many IoT projects are two key components: affordable, capable hardware and flexible integration software. This article explores how to combine the popular Raspberry Pi single-board computer with Apache Camel, a powerful enterprise integration framework, to create IoT solutions that bridge the physical and digital worlds.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Best Practices Websphere MQ/JBoss EAP 6 English Version</title>
      <link>https://gautric.github.io/blog/2015/03/26/best-practices-websphere-mq/jboss-eap-6-english-version/</link>
      <pubDate>Thu, 26 Mar 2015 13:58:00 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/03/26/best-practices-websphere-mq/jboss-eap-6-english-version/</guid>
      <description>&lt;h1 id=&#34;integrating-websphere-mq-with-jboss-eap-6-best-practices&#34;&gt;Integrating WebSphere MQ with JBoss EAP 6: Best Practices&lt;/h1&gt;
&lt;p&gt;Enterprise application integration remains one of the most challenging aspects of modern IT architectures. This article explores how to effectively connect JBoss Enterprise Application Platform (EAP) 6 with IBM WebSphere MQ messaging system using Java EE standards and following industry best practices.&lt;/p&gt;
&lt;h2 id=&#34;introduction-to-jca-and-enterprise-integration&#34;&gt;Introduction to JCA and Enterprise Integration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;http://www.jboss.org/products/eap/overview/&#34;&gt;JBoss EAP&lt;/a&gt; application server is &lt;a href=&#34;http://www.oracle.com/technetwork/java/javaee/overview/compatibility-jsp-136984.html&#34;&gt;Java EE 6 certified&lt;/a&gt;, which means it implements all specifications of this Java Enterprise Edition platform version. Among these specifications, the Java EE Connector Architecture (JCA) standard is implemented through the &lt;a href=&#34;http://www.ironjacamar.org/&#34;&gt;IronJacamar&lt;/a&gt; framework.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Premier post</title>
      <link>https://gautric.github.io/blog/2015/03/10/premier-post/</link>
      <pubDate>Tue, 10 Mar 2015 18:02:10 +0000</pubDate>
      <guid>https://gautric.github.io/blog/2015/03/10/premier-post/</guid>
      <description>&lt;h2 id=&#34;français&#34;&gt;Français&lt;/h2&gt;
&lt;p&gt;Bienvenue sur mon blog ! Je posterai ici mes articles techniques et mes réflexions sur divers sujets informatiques. En espérant que vous y trouverez des informations utiles et intéressantes. Bonne lecture à tous.&lt;/p&gt;
&lt;h2 id=&#34;english&#34;&gt;English&lt;/h2&gt;
&lt;p&gt;Welcome to my blog! I will be posting my technical articles and thoughts on various IT topics here. I hope you&amp;rsquo;ll find useful and interesting information. Happy reading!&lt;/p&gt;
&lt;h2 id=&#34;日本語&#34;&gt;日本語&lt;/h2&gt;
&lt;p&gt;ようこそ、私のブログへ！ここに技術的な記事やIT関連のさまざまな考えを投稿します。役立つ情報を見つけていただければ幸いです。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
